{"revisions":{"1338196977780":{"ts":1338196977780,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"\n/**\n * Module dependencies.\n */\n\nvar express = require('express')\n  , routes = require('./routes')\n  , io = require('socket.io');\n\nvar app = module.exports = express.createServer();\n\n//global variable to store input parameter\nvar params;\n\n\n// Configuration\n\napp.configure(function(){\n  app.set('views', __dirname + '/views');\n  app.set('view engine', 'html');\n  app.use(express.bodyParser());\n  app.use(express.methodOverride());\n  app.use(app.router);\n  app.use(express.static(__dirname + '/public'));\n});\n\napp.configure('development', function(){\n  app.use(express.errorHandler({ dumpExceptions: true, showStack: true }));\n});\n\napp.configure('production', function(){\n  app.use(express.errorHandler());\n});\n\n// Routes\n\n\napp.get('/', function(req, res) {\n    params = req.params.id;\n\tres.sendfile(__dirname +'/views/index.html');\n    });\n\n\n\napp.get('/:id', function(req, res) {\n    params = req.params.id;\n\tres.sendfile(__dirname +'/views/post.html');\n    });\n\nio = io.listen(app);\nvar port = process.env.PORT || 3000;\n\napp.listen(port, function(){\n  console.log(\"Express server listening on port %d in %s mode\", app.address().port, app.settings.env);\n});\n\n//usernames in room\nvar localUser = {};\n\n\n//usernames that are currently connected to char\nvar usernames = {};\n\n//rooms that are currently active\nvar rooms = [];\n\n//storing room specific history\nvar history = {};\n\n\nfunction htmlEntities(str) {\n    return String(str).replace(/&/g, '&amp;').replace(/</g, '&lt;')\n                      .replace(/>/g, '&gt;').replace(/\"/g, '&quot;');\n}\n\nio.sockets.on('connection', function(socket) {\n    \n    socket.emit('news', 'testdata');\n    \n    socket.on('adduser', function(message) {\n    \n\tvar username = htmlEntities(message);\n\n\t//store the username in the socket session for this client\n    socket.username = username;\n    \n    //store room in the socket session\n    socket.room = params;\n    //store room in rooms array\n    rooms.push(params);\n    //add client username to global list\n    usernames[username] = username;\n    \n    //adding client to the room speicify array\n  \n    if(localUser[\"\"+params] === undefined)\n    {\n        localUser[\"\"+params] = {};\n        localUser[\"\"+params][username] = username;\n    }\n    else\n    {\n        localUser[\"\"+params][username] = username;\n    }\n    \n    //send client the room\n    socket.join(params);\n    //user added\n    socket.emit('userAdded',{username:username, room:socket.room,  timestamp: new Date()});\n   \n   io.sockets.in(socket.room).emit(\"updateUsers\", {usernames:localUser[\"\"+params]});\n    if(history[\"\"+params] !== undefined)\n    {\n        socket.emit('loadHistory',history[\"\"+params]);\n    }\n    });\n    \n    socket.on('message', function(msg) {\n        var message = {};\n        message.message = htmlEntities(msg.message);\n        message.user = htmlEntities(msg.user);\n        message.timestamp = new Date();\n\t\tconsole.log(\"message\");\n        if(history[\"\"+params] === undefined)\n        {\n            history[\"\"+params] = [];\n            history[\"\"+params].push(message);\n        }\n        else\n        {\n            history[\"\"+params].push(message);\n        }\n         \n        io.sockets.in(socket.room).emit('update',message);\n    });\n\n    socket.on('disconnect', function() {\n        console.log(\"disconnect called\");\n    //remove username form the global username list\n    delete usernames[socket.username];\n    \n    //remove username form the localroom username list\n    console.log(localUser[\"\"+params]);\n    if( localUser[\"\"+params] != undefined)\n    {\n        delete localUser[\"\"+params][socket.username];\n    }\n    //update userlist\n    \n    io.sockets.in(socket.room).emit(\"updateUsers\", {usernames:localUser[\"\"+params]});\n    \n    socket.leave(socket.room);\n    });\n\n});\n"]],"start1":0,"start2":0,"length1":0,"length2":3749}]],"length":3749},"1338197380576":{"contributors":[],"silentsave":false,"ts":1338197380576,"patch":[[{"diffs":[[0,"ocalUser[\"\"+"],[-1,"params"],[1,"socket.room"],[0,"] === undefi"]],"start1":2086,"start2":2086,"length1":30,"length2":35},{"diffs":[[0,"ocalUser[\"\"+"],[-1,"params"],[1,"socket.room"],[0,"] = {};\n    "]],"start1":2141,"start2":2141,"length1":30,"length2":35},{"diffs":[[0,"ocalUser[\"\"+"],[-1,"params]["],[1,"socket.romm][\"\"+socket."],[0,"username] = "]],"start1":2181,"start2":2181,"length1":32,"length2":47},{"diffs":[[0,"ket.username] = "],[1,"socket."],[0,"username;\n    }\n"]],"start1":2212,"start2":2212,"length1":32,"length2":39},{"diffs":[[0,"calUser["],[-1,"\"\"+params]["],[1,"socket.room][socket."],[0,"username"]],"start1":2276,"start2":2276,"length1":27,"length2":36},{"diffs":[[0,"ket.username] = "],[1,"socket."],[0,"username;\n    }\n"]],"start1":2300,"start2":2300,"length1":32,"length2":39},{"diffs":[[0,"sername:"],[1,"socket."],[0,"username"]],"start1":2443,"start2":2443,"length1":16,"length2":23},{"diffs":[[0,"es:localUser[\"\"+"],[-1,"params"],[1,"socket.room"],[0,"]});\n    if(hist"]],"start1":2574,"start2":2574,"length1":38,"length2":43},{"diffs":[[0,"(history[\"\"+"],[-1,"params"],[1,"socket.room"],[0,"] !== undefi"]],"start1":2612,"start2":2612,"length1":30,"length2":35},{"diffs":[[0,",history[\"\"+"],[-1,"params"],[1,"socket.room"],[0,"]);\n    }\n  "]],"start1":2691,"start2":2691,"length1":30,"length2":35},{"diffs":[[0,"tory[\"\"+"],[-1,"params"],[1,"socket.room"],[0,"] === un"]],"start1":2984,"start2":2984,"length1":22,"length2":27},{"diffs":[[0,"tory[\"\"+"],[-1,"params"],[1,"socket.room"],[0,"] = [];\n"]],"start1":3045,"start2":3045,"length1":22,"length2":27},{"diffs":[[0,"     history[\"\"+"],[-1,"params"],[1,"socket.room"],[0,"].push(message);"]],"start1":3079,"start2":3079,"length1":38,"length2":43},{"diffs":[[0,"tory[\"\"+"],[-1,"params"],[1,"socket.room"],[0,"].push(m"]],"start1":3171,"start2":3171,"length1":22,"length2":27},{"diffs":[[0,"User[\"\"+"],[-1,"params"],[1,"socket.room"],[0,"]);\n    "]],"start1":3550,"start2":3550,"length1":22,"length2":27},{"diffs":[[0,"User[\"\"+"],[-1,"params"],[1,"socket.room"],[0,"][socket"]],"start1":3642,"start2":3642,"length1":22,"length2":27},{"diffs":[[0,"User[\"\"+"],[-1,"params"],[1,"socket.room"],[0,"]});\n   "]],"start1":3781,"start2":3781,"length1":22,"length2":27}]],"length":3854,"saved":false},"1338197500009":{"ts":1338197500009,"patch":[[{"diffs":[[0,"ocket.ro"],[-1,"m"],[1,"o"],[0,"m][\"\"+so"]],"start1":2194,"start2":2194,"length1":17,"length2":17}]],"length":3854,"saved":false},"1338197624826":{"ts":1338197624826,"patch":[[{"diffs":[[0,"rname;\n    \n"],[1,"    //test data\n    socket.set('test data','Mohammed Lakkadshaw', function(){});\n    \n"],[0,"    //adding"]],"start1":2016,"start2":2016,"length1":24,"length2":110}]],"length":3940,"saved":false},"1338198057894":{"ts":1338198057894,"patch":[[{"diffs":[[0,"et.join("],[-1,"params"],[1,"socket.room"],[0,");\n    /"]],"start1":2465,"start2":2465,"length1":22,"length2":27}]],"length":3945,"saved":false}}}